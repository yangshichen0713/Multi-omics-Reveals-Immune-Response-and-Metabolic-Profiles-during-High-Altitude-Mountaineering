#1、加载资源包
library(Seurat)
library(patchwork)
library(dplyr)
library(cowplot)
library(tidyr)
library(ggplot2)
library(RColorBrewer)
library(SeuratObject)
library(reshape2)

#2、读取数据
scRNA <- readRDS("scRNA.rds")
scRNA

table(scRNA$group)
table(scRNA$people)

#3、信息统计
rp = grep("^RP[SL][[:digit:]]", x= rownames(scRNA),value = T)#核糖体基因
mt = grep('^MT-', x= rownames(scRNA),value = T)#线粒体基因
ncRNA = grep("^[A-Z][A-Z][0-9]*\\.[0-9]", x= rownames(scRNA),value = T)#非编码RNA基因 

HB.genes_total <- c("HBA1","HBA2","HBB","HBD","HBE1","HBG1","HBG2","HBM","HBQ1","HBZ") #人类血液常见红细胞基因
HB_m <- match(HB.genes_total,rownames(scRNA@assays$RNA))
HB.genes <- rownames(scRNA@assays$RNA)[HB_m]
HB <- HB.genes[!is.na(HB.genes)]

scRNA <- PercentageFeatureSet(scRNA,pattern = "^RP[SL][[:digit:]]",col.name = "percent.rp") %>%
  PercentageFeatureSet(pattern = "^MT-",col.name = "percent.mt") %>%
  PercentageFeatureSet(pattern = "^[A-Z][A-Z][0-9]*\\.[0-9]",col.name = "percent.ncRNA") %>%
  PercentageFeatureSet(features=HB.genes, col.name = "percent.HB")

#4、原始数据信息
p <- VlnPlot(scRNA, features = c("nFeature_RNA", "nCount_RNA","percent.mt", "percent.rp", "percent.ncRNA","percent.HB"),ncol = 3,group.by="group",pt.size = 0)
ggsave("QC_Raw1.pdf", plot=p, width=20, height=10)

p <- VlnPlot(scRNA, features = c("nFeature_RNA", "nCount_RNA","percent.mt", "percent.rp", "percent.ncRNA","percent.HB"),ncol = 3,group.by="people",pt.size = 0)
ggsave("QC_Raw2.pdf", plot=p, width=20, height=10)

scRNA <- subset(scRNA,subset = nFeature_RNA > 200 & nFeature_RNA < 6000 & percent.mt < 10 & percent.HB < 1 ) #过滤

#5、过滤后数据信息
p <- VlnPlot(scRNA, features = c("nFeature_RNA", "nCount_RNA","percent.mt", "percent.rp", "percent.ncRNA","percent.HB"),ncol = 3,group.by="group",pt.size = 0)
ggsave("QC_Filter1.pdf", plot=p, width=20, height=10)

p <- VlnPlot(scRNA, features = c("nFeature_RNA", "nCount_RNA","percent.mt", "percent.rp", "percent.ncRNA","percent.HB"),ncol = 3,group.by="people",pt.size = 0)
ggsave("QC_Filter2.pdf", plot=p, width=20, height=10)

#6、过滤基因
ids = c(mt,ncRNA,rp) %>% unique 
scRNA = scRNA[-which(rownames(scRNA) %in% ids),]
scRNA

#7、标准化和降维
scRNA <- NormalizeData(scRNA,normalization.method = "LogNormalize", scale.factor = 10000)
scRNA <- FindVariableFeatures(scRNA,selection.method = "vst",nfeatures = 2000)
scRNA <- ScaleData(scRNA)
scRNA <- RunPCA(scRNA,pc.genes = VariableFeatures(pbmc_1),verbose = T)
DimHeatmap(scRNA, dims = 1:15, cells = 500, balanced = TRUE)
ElbowPlot(scRNA,ndims = 50)
pc.num = 1:20
scRNA <- RunUMAP(scRNA, dims = pc.num, n.neighbors = 30L, min.dist = 0.3)

#8、细胞聚类和差异分析
scRNA <- FindNeighbors(scRNA, dims = pc.num)
scRNA <- FindClusters(scRNA, resolution = 0.75)
plot <-DimPlot(scRNA, reduction = "umap", label=T,raster=FALSE)

#9、差异基因分析
scRNA.markers <- FindAllMarkers(scRNA, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
top20.scRNA.markers <- scRNA.markers %>% group_by(cluster) %>% top_n(n = 20, wt = avg_log2FC)
write.csv(scRNA.markers,"scRNA.allmarkers.csv")
write.csv(top20.scRNA.markers,"scRNA.top20markers.csv")

#10、细胞注释
umap = scRNA@reductions$umap@cell.embeddings %>%  #坐标信息
  as.data.frame() %>% 
  cbind(cell_type = scRNA@active.ident) # 注释后的label信息,改为cell_type

p1 <- ggplot(umap,aes(x= UMAP_1 , y = UMAP_2 ,color = cell_type)) +
  geom_point(size = 0.25 , alpha = 0.5 )  +
  scale_color_manual(values = my36colors)
p2 <- p1  +
  theme(panel.grid.major = element_blank(), #主网格线
        panel.grid.minor = element_blank(), #次网格线
        panel.border = element_blank(), #边框
        axis.title = element_blank(),  #轴标题
        axis.text = element_blank(), # 文本
        axis.ticks = element_blank(),
        panel.background = element_rect(fill = 'white'), #背景色
        plot.background=element_rect(fill="white"))
p3 <- p2 +         
  theme(
    legend.title = element_blank(), #去掉legend.title 
    legend.key=element_rect(fill='white'), #
    legend.text = element_text(size=10), #设置legend标签的大小
    legend.key.size=unit(1,'cm') ) +  # 设置legend标签之间的大小
  guides(color = guide_legend(override.aes = list(size=5))) + #设置legend中点的大小 
  theme(legend.position = "none")
p3
p4 <- p3 + 
  geom_segment(aes(x = min(umap$UMAP_1) , y = min(umap$UMAP_2) ,
                   xend = min(umap$UMAP_1) + 2, yend = min(umap$UMAP_2) ),
               colour = "black", size=1,arrow = arrow(length = unit(0.3,"cm")))+ 
  geom_segment(aes(x = min(umap$UMAP_1)  , y = min(umap$UMAP_2)  ,
                   xend = min(umap$UMAP_1) , yend = min(umap$UMAP_2) + 1.2),
               colour = "black", size=1,arrow = arrow(length = unit(0.3,"cm"))) +
  annotate("text", x = min(umap$UMAP_1) +0.8, y = min(umap$UMAP_2) -0.8, label = "UMAP 1",
           color="black",size = 3, fontface="bold" ) + 
  annotate("text", x = min(umap$UMAP_1) -0.8, y = min(umap$UMAP_2) +0.8, label = "UMAP 2",
           color="black",size = 3, fontface="bold" ,angle=90)+
  theme(legend.position = "none")
cell_type_med <- umap %>% group_by(cell_type) %>% summarise(UMAP_1 = median(UMAP_1),UMAP_2 = median(UMAP_2))
library(ggrepel)
p5 <- p4 +
  geom_label_repel(aes(label=cell_type), fontface="bold",data = cell_type_med,
                   point.padding=unit(0.5, "lines"))+
  theme(legend.position = "none")
p5

#8、细胞比例变化
sce_cell <- data.frame()
a <- list()
i=1
for (sample in names(table(scRNA@meta.data$newname))){
  a<-list(prop.table(table(scRNA$celltype[scRNA$newname==sample])))
  for (ct in names(a[[1]])){
    sce_cell[i,"percentage"] <- as.numeric(a[[1]][ct])
    sce_cell[i,"celltype"] <- names(a[[1]][ct])
    sce_cell[i,"group"]<- names(table(scRNA$group[scRNA$newname==sample]))
    sce_cell[i,"people"]<- names(table(scRNA$people[scRNA$newname==sample]))
    sce_cell[i,"sample"]<-sample
    i=i+1
  }
}
library(ggpubr)
for (celltype in names(table(sce_cell$celltype))){
  g <- ggplot(data = sce_cell[sce_cell$celltype==celltype,],aes(group,percentage))+
    geom_boxplot(color= c('grey40'),
                 fill= c('grey50'),alpha=0.1,size=0.25,width = 0.6)+
    stat_compare_means(comparisons = list(c("D01","D04"),c("D01","D09"),c("D01","D11"),
                                          c("D01","D16")),
                       method="wilcox.test", #(t.test or wilcox.test)
                       paired = T,
                       size=2,
                       p.adjust.method="BH",
                       symnum.args = list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
                                          symbols = c("***", "**", "*", "ns")))+
    geom_point(aes(color = people),size =1.2 ,alpha= 1)+
    geom_line(aes(group=factor(people), color= factor(people)), linewidth = 0.2)+ 
    scale_color_manual(values = c('#9ED2C8', '#E4C755','#C1B8D7', '#EB8878','#8BB1D1', 
                                  '#E39A35', '#B8D976','#EECCE1', '#9FA3A8','#BD956A', '#3A6963'))+
    theme_classic()+
    labs(title = paste0(celltype))+ 
    theme(panel.background=element_rect(fill="white",colour="black",size=0.25), # 填充框内主题颜色，边框颜色和边框线条粗细
          axis.line=element_line(colour="black",size=0.2), # x,y轴颜色，粗细
          axis.title=element_text(size=6,color="black"), # x,y轴名设置
          axis.text = element_text(size=6,color="black"), # x,y轴文本设置
          axis.text.x = element_text(angle = 45, hjust = 1),
    legend.position="right")+border("black")#加边框
  
  ggsave(paste0(celltype,"_persentage.pdf"),g,width=4,height=5)
}
